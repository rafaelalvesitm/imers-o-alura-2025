from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import warnings
import os

warnings.filterwarnings("ignore")

# Vari√°veis globais
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Verifica se a vari√°vel de ambiente GOOGLE_API_KEY est√° definida
if not GOOGLE_API_KEY:
    print("Erro: Vari√°vel de ambiente GOOGLE_API_KEY n√£o definida!")
    exit(1)

# --- Defini√ß√£o dos Agentes ---

# Agente Classificador (mantido igual)
def agente_classificador(pergunta):
    classificador = Agent(
        name="agente_classificador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente de classifica√ß√£o para auxiliar o professor da disciplina de Fundamentos de Algoritmos dada em Python.  
        A sua tarefa √© classificar a pergunta dada conforme as seguintes categorias:
        1. D√∫vida sobre a prova: Pergunta relacionada a provas, quest√µes ou avalia√ß√µes da disciplina.	
        2. D√∫vida sobre o professor: Pergunta relacionada ao professor, como hor√°rios de atendimento ou prefer√™ncias de ensino.
        3. D√∫vida sobre o curso: Pergunta relacionada ao curso, como requisitos ou estrutura curricular.
        4. D√∫vida sobre a disciplina: Pergunta relacionada a disciplina, como pr√©-requisitos ou conte√∫do program√°tico.
        5. D√∫vida sobre o material: Pergunta relacionada ao material did√°tico, como livros ou apostilas recomendadas.
        6. D√∫vida sobre o laborat√≥rio: Pergunta relacionada ao laborat√≥rio, como hor√°rios ou equipamentos dispon√≠veis.
        7. D√∫vida sobre o Projeto: Pergunta relacionada ao projeto, como requisitos ou prazos.
        8. D√∫vida te√≥rica: Pergunta sobre conceitos sobre Python. 
        9. D√∫vida sobre c√≥digo em Python: Pergunta relacionada a c√≥digo em Python, como sintaxe, erros, boas pr√°ticas ou bibliotecas.
        
        Responda apenas com a categoria correspondente √† pergunta.
        Se a pergunta n√£o se encaixar em nenhuma das categorias acima, responda com "Nenhuma das op√ß√µes acima".
        Se a pergunta n√£o for relacionada √† disciplina de Fundamentos de Algoritmos ou programa√ß√£o em geral, responda com "Nenhuma das op√ß√µes acima".
        """,
        description="Agente que classifica perguntas em diferentes categorias",
    )
    entrada_do_agente_classificador = f"Texto: {pergunta}"
    classificacao = chamar_agente(classificador, entrada_do_agente_classificador)
    return classificacao.strip() # Remove espa√ßos em branco extras

# Agentes Especializados (Exemplos)

def agente_duvida_teorica():
    return Agent(
        name="agente_teorica",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente que conhece Python a fundo chamado "Pythonista Te√≥rico".
        Sua tarefa √© explicar conceitos de programa√ß√£o, algoritmos e recursos da linguagem Python de forma clara e did√°tica.
        Responda √† pergunta focando nos aspectos te√≥ricos e conceituais. 
        De exemplos pr√°ticos quando necess√°rio, mas mantenha o foco na teoria.
        Se o usu√°rio pedir para explicar um conceito de programa√ß√£o, forne√ßa uma explica√ß√£o clara e concisa.
        """,
        description="Agente que responde a d√∫vidas te√≥ricas sobre algoritmos e Python."
    )

def agente_duvida_codigo():
    return Agent(
        name="agente_codigo",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente especializado em C√≥digo Python chamado de 'Pythonista Pr√°tico'.
        Sua tarefa √© ajudar o usu√°rio com d√∫vidas sobre sintaxe, erros comuns, depura√ß√£o e boas pr√°ticas de codifica√ß√£o em Python.
        Analise o c√≥digo fornecido (se houver) ou a descri√ß√£o do problema e ofere√ßa solu√ß√µes ou explica√ß√µes relacionadas ao c√≥digo.
        Responda de forma a ajudar o aluno a entender o problema e a solu√ß√£o. N√£o forne√ßa apenas o c√≥digo, mas explique o que ele faz e como funciona.
        Se o c√≥digo n√£o estiver claro, pe√ßa mais informa√ß√µes ou detalhes sobre o que o usu√°rio est√° tentando fazer.
        Se o usu√°rio fornecer um erro espec√≠fico, ajude a depur√°-lo e a entender o que est√° acontecendo.
        Se o usu√°rio pedir para explicar um conceito de programa√ß√£o, forne√ßa uma explica√ß√£o clara e concisa.
        Se o usu√°rio pedir para otimizar um c√≥digo, forne√ßa sugest√µes de melhorias e explique por que essas mudan√ßas s√£o ben√©ficas.
        Se o usu√°rio pedir para implementar uma fun√ß√£o ou algoritmo espec√≠fico, forne√ßa um exemplo de c√≥digo e explique como ele funciona.
        Se o usu√°rio pedir para comparar diferentes abordagens ou bibliotecas, forne√ßa uma an√°lise comparativa e explique as vantagens e desvantagens de cada uma.
        Se o usu√°rio pedir para explicar um erro espec√≠fico, forne√ßa uma explica√ß√£o clara e ajude a depur√°-lo.
        Se a pergunta n√£o estiver relacionada a c√≥digo, informe que voc√™, s√≥ pode ajudar com quest√µes de programa√ß√£o.
        """,
        description="Agente que responde a d√∫vidas sobre c√≥digo em Python, auxiliando o aluno a entender o problema e a solu√ß√£o."
    )

def agente_duvida_disciplina():
    return Agent(
        name="agente_disciplina",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente especializado na disciplina 'Fundamentos de Algoritmos'.
        Sua tarefa √© fornecer informa√ß√µes gerais sobre a disciplina, como ementa, objetivos, pr√©-requisitos e estrutura do curso (se dispon√≠vel em sua base de conhecimento).
        Evite dar detalhes espec√≠ficos que mudam a cada semestre, a menos que tenha acesso a informa√ß√µes atualizadas.
        """,
        description="Agente que responde a d√∫vidas gerais sobre a disciplina."
    )

# ... adicione fun√ß√µes para criar outros agentes especializados conforme necess√°rio ...
# def agente_duvida_prova(): ...
# def agente_duvida_professor(): ...
# etc.

def agente_fallback():
    return Agent(
        name="agente_fallback",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente geral para a disciplina de Fundamentos de Algoritmos.
        A pergunta feita n√£o se encaixou em nenhuma das categorias especializadas ou est√° fora do escopo esperado.
        Pe√ßa desculpas por n√£o poder responder diretamente ou sugira que o usu√°rio reformule a pergunta.
        """,
        description="Agente de fallback para perguntas n√£o classificadas ou fora do escopo."
    )


# --- Fun√ß√£o auxiliar para chamar agente (mantida igual) ---
def chamar_agente(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    # Nota: Criar uma nova sess√£o para CADA chamada pode n√£o manter contexto entre chamadas
    # Para manter contexto, voc√™ reutilizaria a sess√£o ou passaria hist√≥rico.
    # Para este exemplo simples de dispatcher, uma nova sess√£o √© OK.
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response.strip() # Remove espa√ßos/linhas extras no final


# --- L√≥gica Principal ---
def main():
    print("Bem vindo ao ü§ñ BOT Auxiliar sobre a Disciplina de Fundamentos de Algoritmos!")
    print()

    # --- Obter o T√≥pico do Usu√°rio ---
    topico = input("‚ùì Fa√ßa a sua pergunta: ")

    if not topico:
        print("Voc√™ esqueceu de digitar a pergunta!")
        return # Sai da fun√ß√£o main se n√£o houver pergunta

    print(f"Maravilha, vamos chamar os nossos agentes ü§ñü§ñü§ñ para te ajudar com essa pergunta!")

    # 1. Classificar a pergunta
    classificacao = agente_classificador(topico)
    print(f"\n--- Debug Classifica√ß√£o: {classificacao} ---\n")

    # 2. Mapear a classifica√ß√£o para o agente correto
    agentes_disponiveis = {
        "D√∫vida te√≥rica": agente_duvida_teorica(),
        "D√∫vida sobre c√≥digo em Python": agente_duvida_codigo(),
        "D√∫vida sobre a disciplina": agente_duvida_disciplina(),
        # Adicione aqui os outros mapeamentos quando criar os agentes
        # "D√∫vida sobre a prova": agente_duvida_prova(),
        # "D√∫vida sobre o professor": agente_duvida_professor(),
        # etc.
        "Nenhuma das op√ß√µes acima": agente_fallback() # Agente padr√£o para o fallback do classificador
    }

    # Seleciona o agente com base na classifica√ß√£o.
    # Usa .get() para retornar o agente_fallback se a classifica√ß√£o n√£o estiver no dicion√°rio.
    agente_selecionado = agentes_disponiveis.get(classificacao, agente_fallback())

    print(f"--- ü§ñ Chamando o Agente Espec√≠fico: {agente_selecionado.name} ---\n")

    # 3. Chamar o agente selecionado com a pergunta original
    resposta_final = chamar_agente(agente_selecionado, topico)

    print("\n--- ‚úÖ Resposta Final ---\n")
    print(resposta_final)
    print("--------------------------------------------------------------")


if __name__ == "__main__":
    main()