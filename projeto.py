# -*- coding: utf-8 -*-
"""Projeto Imersão Alura - 2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MPPa-HC3vDyyC5obq0VaE24wCiZJXlUv
"""

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import warnings
import os
import textwrap
import fitz  # Importa a biblioteca PyMuPDF
import json

warnings.filterwarnings("ignore")

# Variáveis globais
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Verifica se a variável de ambiente GOOGLE_API_KEY está definida
if not os.environ["GOOGLE_API_KEY"]:
    print("Erro: Variável de ambiente GOOGLE_API_KEY não definida!")
    exit(1)

# Agente Classificador
def agente_classificador(pergunta):
    classificador = Agent(
        name="agente_classificador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente de classificação para auxiliar o professor da disciplina de Fundamentos de Algoritmos dada em Python.
        A sua tarefa é classificar a pergunta dada conforme as seguintes categorias:
        1. Dúvida sobre a prova: Pergunta relacionada a provas, questões ou avaliações da disciplina.
        2. Dúvida sobre o professor: Pergunta relacionada ao professor, como horários de atendimento ou preferências de ensino.
        3. Dúvida sobre o curso: Pergunta relacionada ao curso, como requisitos ou estrutura curricular.
        4. Dúvida sobre a disciplina: Pergunta relacionada a disciplina, como pré-requisitos ou conteúdo programático.
        5. Dúvida sobre o material: Pergunta relacionada ao material didático, como livros ou apostilas recomendadas.
        6. Dúvida sobre o laboratório: Pergunta relacionada ao laboratório, como horários ou equipamentos disponíveis.
        7. Dúvida sobre o Projeto: Pergunta relacionada ao projeto, como requisitos ou prazos.
        8. Dúvida teórica: Pergunta sobre conceitos sobre Python.
        9. Dúvida sobre código em Python: Pergunta relacionada a código em Python, como sintaxe, erros, boas práticas ou bibliotecas.

        Responda apenas com a categoria correspondente à pergunta.
        Se a pergunta não se encaixar em nenhuma das categorias acima, responda com "Nenhuma das opções acima".
        Se a pergunta não for relacionada à disciplina de Fundamentos de Algoritmos ou programação em geral, responda com "Nenhuma das opções acima".
        """,
        description="Agente que classifica perguntas em diferentes categorias",
    )
    entrada_do_agente_classificador = f"Texto: {pergunta}"
    classificacao = chamar_agente(classificador, entrada_do_agente_classificador)
    return classificacao.strip() # Remove espaços em branco extras

# Agente para dúvida teórica
def agente_duvida_teorica():
    return Agent(
        name="agente_teorica",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente que conhece Python a fundo chamado "Pythonista Teórico".
        Sua tarefa é explicar conceitos de programação, algoritmos e recursos da linguagem Python de forma clara e didática.
        Responda à pergunta focando nos aspectos teóricos e conceituais.
        De exemplos práticos quando necessário, mas mantenha o foco na teoria.
        Se o usuário pedir para explicar um conceito de programação, forneça uma explicação clara e concisa.
        """,
        description="Agente que responde a dúvidas teóricas sobre algoritmos e Python."
    )

# Agente para dúvida de código.
def agente_duvida_codigo():
    return Agent(
        name="agente_codigo",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente especializado em Código Python chamado de 'Pythonista Prático'.
        Sua tarefa é ajudar o usuário com dúvidas sobre sintaxe, erros comuns, depuração e boas práticas de codificação em Python.
        Analise o código fornecido (se houver) ou a descrição do problema e ofereça soluções ou explicações relacionadas ao código.
        Responda de forma a ajudar o aluno a entender o problema e a solução. Não forneça apenas o código, mas explique o que ele faz e como funciona.
        Se o código não estiver claro, peça mais informações ou detalhes sobre o que o usuário está tentando fazer.
        Se o usuário fornecer um erro específico, ajude a depurá-lo e a entender o que está acontecendo.
        Se o usuário pedir para explicar um conceito de programação, forneça uma explicação clara e concisa.
        Se o usuário pedir para otimizar um código, forneça sugestões de melhorias e explique por que essas mudanças são benéficas.
        Se o usuário pedir para implementar uma função ou algoritmo específico, forneça um exemplo de código e explique como ele funciona.
        Se o usuário pedir para comparar diferentes abordagens ou bibliotecas, forneça uma análise comparativa e explique as vantagens e desvantagens de cada uma.
        Se o usuário pedir para explicar um erro específico, forneça uma explicação clara e ajude a depurá-lo.
        Se a pergunta não estiver relacionada a código, informe que você, só pode ajudar com questões de programação.
        """,
        description="Agente que responde a dúvidas sobre código em Python, auxiliando o aluno a entender o problema e a solução."
    )

# Agente para dúvida na disciplina de Fundamentos de Algoritmos
def agente_duvida_disciplina():
    return Agent(
        name="agente_disciplina",
        model="gemini-2.0-flash", # Ou outro modelo compatível com ferramentas
        instruction="""
        Você é um assistente especializado na disciplina 'Fundamentos de Algoritmos'.
        Sua principal tarefa é **consultar os documentos fornecidos sobre a disciplina** para responder às perguntas do usuário.
        Use a ferramenta de busca de documentos para encontrar informações relevantes sobre a ementa, objetivos, pré-requisitos, estrutura do curso, tópicos específicos e quaisquer outros detalhes contidos nos materiais.
        Baseie suas respostas estritamente nas informações encontradas nos documentos. Se a resposta para uma pergunta não estiver presente nos documentos consultados, por favor, informe o usuário que a informação não foi encontrada na sua base de conhecimento.
        Evite inventar informações ou fornecer detalhes que não estejam explicitamente nos documentos.
        Utilize como base os documentos sobre a disciplina, fornecidos pela ferramenta carrega_aulas, para responder às perguntas caso necessário.
        Essa função retorna um json com o nome das aulas e o conteúdo das mesmas.
        """,
        description="Agente que consulta documentos para responder a dúvidas sobre a disciplina 'Fundamentos de Algoritmos'.",
        tools = [carrega_aulas]
    )

def agente_duvida_prova():
    return Agent(
        name="agente_duvida_prova",
        model="gemini-2.0-flash", # Ou outro modelo compatível com ferramentas
        instruction="""
        Você é um assistente especializado em responder dúvidas sobre as avaliações (provas, trabalhos, etc.) da disciplina 'Fundamentos de Algoritmos'.
        Sua principal tarefa é **consultar os documentos fornecidos sobre as avaliações** para responder às perguntas do usuário.
        Use a ferramenta de busca de documentos para encontrar informações relevantes sobre datas de prova, formatos, conteúdos avaliados, critérios de correção, agendamento de segundas chamadas, regras de participação, etc.
        Baseie suas respostas estritamente nas informações encontradas nos documentos.
        Se a resposta para uma pergunta específica sobre uma avaliação (como "Qual o conteúdo da prova P2?" ou "Onde encontro o gabarito da P1?") não estiver explicitamente nos documentos consultados, por favor, informe o usuário que a informação não foi encontrada na sua base de conhecimento disponível.
        Evite especular ou fornecer informações que não estejam confirmadas nos documentos.
        """,
        description="Agente que consulta documentos para responder a dúvidas sobre as avaliações da disciplina."
    )

def agente_duvida_laboratorio():
    return Agent(
        name="agente_duvida_laboratorio",
        model="gemini-2.0-flash", # Ou outro modelo compatível com ferramentas
        instruction="""
        Você é um assistente especializado em responder dúvidas sobre as atividades de laboratório relacionadas à disciplina 'Fundamentos de Algoritmos'.
        Sua principal tarefa é **consultar os documentos fornecidos sobre o laboratório** utilizando a ferramenta de busca.
        Busque informações relevantes sobre:
        - Horários e locais das sessões de laboratório
        - Equipamentos ou softwares específicos necessários para o laboratório
        - Procedimentos ou regras de segurança do laboratório
        - Roteiros de laboratório ou guias práticos
        - Como entregar relatórios ou resultados das atividades de laboratório
        - Agendamento ou uso livre dos laboratórios (se aplicável e nos documentos).
        Baseie suas respostas estritamente nas informações encontradas nos documentos.
        Se a informação solicitada sobre o laboratório não estiver presente nos documentos consultados, por favor, informe o usuário que a informação não foi encontrada na base de conhecimento disponível.
        Evite fornecer informações sobre o laboratório que não estejam nos documentos oficiais ou comunicados sobre as atividades práticas.
        """,
        description="Agente que consulta documentos para responder a dúvidas sobre o laboratório da disciplina."
    )

def agente_duvida_projeto():
    return Agent(
        name="agente_duvida_projeto",
        model="gemini-2.0-flash", # Ou outro modelo compatível com ferramentas
        instruction="""
        Você é um assistente especializado em responder dúvidas sobre o(s) projeto(s) prático(s) da disciplina 'Fundamentos de Algoritmos'.
        Sua principal tarefa é **consultar os documentos fornecidos sobre o projeto** utilizando a ferramenta de busca.
        Busque informações relevantes sobre:
        - Descrição geral do projeto
        - Requisitos e funcionalidades esperadas no projeto
        - Prazos de entrega das diferentes fases ou do projeto final
        - Critérios de avaliação do projeto
        - Regras para formação de equipes (se aplicável)
        - Ferramentas ou tecnologias específicas a serem usadas no projeto
        - Onde encontrar os enunciados ou especificações detalhadas do projeto.
        Baseie suas respostas estritamente nas informações encontradas nos documentos.
        Se a informação solicitada sobre o projeto não estiver presente nos documentos consultados, por favor, informe o usuário que a informação não foi encontrada na base de conhecimento disponível.
        Evite especular sobre o projeto que não esteja explicitamente definido nos documentos oficiais.
        """,
        description="Agente que consulta documentos para responder a dúvidas sobre o(s) projeto(s) da disciplina."
    )

def agente_duvida_professor():
    return Agent(
        name="agente_duvida_professor",
        model="gemini-2.0-flash", # Ou outro modelo compatível com ferramentas
        instruction="""
        Você é um assistente especializado em fornecer informações sobre o(s) professor(es) da disciplina 'Fundamentos de Algoritmos'.
        Sua principal tarefa é consultar as informações sobre os professores com a ferramenta carrega_professor que carrega o currículo dos professores desta disciplina.
        Baseie suas respostas estritamente nas informações encontradas.
        Se a informação solicitada sobre o professor não estiver presente nos documentos consultados, por favor, informe o usuário que a informação não foi encontrada na sua base de conhecimento disponível.
        Evite fornecer informações pessoais não contidas em documentos públicos ou da disciplina ou especular sobre dados não confirmados.
        """,
        description="Agente que consulta documentos para responder a dúvidas sobre o(s) professor(es) da disciplina.",
        tools=[carrega_professor]
    )

def agente_duvida_prova():
    """
    Define um agente especializado em responder dúvidas sobre as avaliações (provas, trabalhos, etc.)
    da disciplina 'Fundamentos de Algoritmos', utilizando uma ferramenta RAG.
    """
    return Agent(
        name="agente_duvida_prova",
        model="gemini-2.0-flash", # Use o modelo apropriado, compatível com ferramentas
        instruction="""
        Você é um assistente especializado em responder dúvidas sobre as avaliações (provas, trabalhos, quizzes, etc.) da disciplina 'Fundamentos de Algoritmos'.
        Sua principal tarefa é **consultar os documentos fornecidos sobre as avaliações** utilizando a ferramenta de busca (tool) para responder às perguntas do usuário.
        Busque informações relevantes sobre:
        - Datas e horários de provas, trabalhos, etc.
        - Formatos das avaliações (online, presencial, múltipla escolha, dissertativa, etc.)
        - Conteúdo específico que será avaliado em cada prova ou trabalho
        - Critérios de correção e pontuação das avaliações
        - Regras para segunda chamada ou recuperação de avaliações
        - Procedimentos de entrega de trabalhos e projetos
        - Regras de conduta e normas durante as avaliações
        - Localização e acesso a gabaritos ou resultados (se disponíveis nos documentos)
        - Pesos ou porcentagens de cada avaliação na nota final (se especificado)

        Baseie suas respostas estritamente nas informações encontradas nos documentos. Não invente ou deduza informações que não estejam explicitamente contidas nos materiais.
        Se a informação solicitada (como a data exata de uma prova futura, o conteúdo detalhado de um trabalho específico, ou um gabarito) não estiver presente nos documentos consultados, por favor, informe educadamente o usuário que a informação não foi encontrada na sua base de conhecimento disponível.
        Mantenha um tom informativo e focado nos fatos contidos nos documentos de avaliação.
        """,
        description="Agente que consulta documentos para responder a dúvidas sobre as avaliações (provas, trabalhos) da disciplina 'Fundamentos de Algoritmos'."
    )

def agente_fundamentos_algoritmos():
    """
    Define um agente especializado em responder dúvidas sobre o conteúdo da disciplina
    'Fundamentos de Algoritmos', utilizando as apresentações de aula como base de conhecimento via ferramenta RAG.
    """
    agent = Agent(
        name="agente_fundamentos_algoritmos",
        model="gemini-2.0-flash", # Use o modelo apropriado, compatível com ferramentas
        instruction="""
        Você é um assistente especializado em responder dúvidas sobre o conteúdo da disciplina 'Fundamentos de Algoritmos' com base nos materiais de aula fornecidos (slides).
        Sua principal tarefa é **consultar os documentos de aula** utilizando a ferramenta de busca (tool) para encontrar e sintetizar informações relevantes para responder às perguntas do usuário.
        Os materiais cobrem tópicos como:
        - Introdução à lógica sequencial e algoritmos
        - Variáveis e tipos de dados (inteiros, reais, strings, booleanos, complexos)
        - Operadores (aritméticos, relacionais, lógicos) e precedência
        - Estruturas condicionais (if, else, elif)
        - Estruturas de repetição (while, for) e laços aninhados
        - Funções (definição, parâmetros, retorno, variáveis locais e globais, funções lambda)
        - Estruturas de dados (listas, tuplas, dicionários, listas aninhadas/matrizes)
        - Manipulação de strings
        - Módulos e pacotes
        - Noções básicas de interface gráfica do usuário (GUI) com Tkinter
        - Manuseio de arquivos

        Ao responder, referencie o conteúdo dos slides. Explique conceitos, apresente sintaxe e, quando aplicável, forneça exemplos de código encontrados nos materiais.
        Baseie suas respostas estritamente nas informações encontradas nos documentos fornecidos. Não invente ou deduza informações que não estejam explicitamente contidas nos materiais.
        Se a informação solicitada não estiver presente nos documentos consultados, por favor, informe educadamente o usuário que a informação não foi encontrada na sua base de conhecimento disponível.
        Mantenha um tom informativo e útil para um estudante da disciplina.
        """,
        description="Agente que consulta as apresentações de aula para responder a dúvidas sobre o conteúdo da disciplina 'Fundamentos de Algoritmos'.",
        tools = [carrega_aulas] # a função carrega aulas le as aulas em um arquivo json depois de extrair informações dos PDFs das aulas.
    )
    return agent

# Agente caso algo não de certo na classificação
def agente_fallback():
    return Agent(
        name="agente_fallback",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente geral para a disciplina de Fundamentos de Algoritmos.
        A pergunta feita não se encaixou em nenhuma das categorias especializadas ou está fora do escopo esperado.
        Peça desculpas por não poder responder diretamente ou sugira que o usuário reformule a pergunta.
        """,
        description="Agente de fallback para perguntas não classificadas ou fora do escopo."
    )

# --- Função auxiliar para chamar agente
def chamar_agente(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    # Nota: Criar uma nova sessão para CADA chamada pode não manter contexto entre chamadas
    # Para manter contexto, você reutilizaria a sessão ou passaria histórico.
    # Para este exemplo simples de dispatcher, uma nova sessão é OK.
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response.strip() # Remove espaços/linhas extras no final

def extrai_texto_pdf_para_json(pdf_paths: list, output_json_path: str) -> dict:
    """
    Extrai texto de múltiplos arquivos PDF, armazenando o conteúdo em um dicionário
    onde as chaves são os nomes dos arquivos e os valores são os seus conteúdos.
    O dicionário resultante é salvo em um arquivo JSON.

    Args:
        pdf_paths: Uma lista de caminhos para os arquivos PDF a serem lidos.
        output_json_path: O caminho completo para o arquivo JSON onde o dicionário será salvo.

    Returns:
        Um dicionário onde as chaves são os nomes dos arquivos e os valores são
        os seus conteúdos, ou um dicionário parcialmente preenchido/vazio em caso de erro
        na leitura de alguns arquivos.
    """
    document_data = {}

    print(f"Iniciando a extração de texto de arquivos PDF: {pdf_paths}")

    for pdf_path in pdf_paths:
        # Pega apenas o nome do arquivo para usar como chave no dicionário
        filename = os.path.basename(pdf_path)

        try:
            # Abre o documento PDF
            doc = fitz.open(pdf_path)
            full_text = ""

            # Extrai texto de cada página e concatena
            for page_num in range(doc.page_count):
                page = doc.load_page(page_num)
                # Extrai texto. 'sort=True' tenta ordenar o texto lido por posição.
                text = page.get_text("text", sort=True)
                full_text += text + "\n\n--- Nova Página ---\n\n" # Adiciona separador entre páginas

            doc.close() # Fecha o documento PDF

            # Armazena o texto extraído no dicionário
            document_data[filename] = full_text.strip() # Remove espaços em branco extras do início/fim
            print(f"Texto do arquivo '{filename}' extraído com sucesso.")

        except fitz.FileNotFoundError:
            print(f"Erro: O arquivo PDF não foi encontrado em: {pdf_path}")
            # Continua para o próximo arquivo, ignorando este
        except fitz.FileDataError:
             print(f"Erro: O arquivo PDF '{pdf_path}' está corrompido ou não é um PDF válido.")
             # Continua para o próximo arquivo
        except Exception as e:
            print(f"Erro inesperado ao processar o arquivo '{pdf_path}': {e}")
            # Continua para o próximo arquivo, tratando outros erros

    # Salva o dicionário resultante em um arquivo JSON
    try:
        with open(output_json_path, 'w', encoding='utf-8') as json_file:
            # Use indent para tornar o JSON legível, ensure_ascii=False para manter caracteres especiais
            json.dump(document_data, json_file, indent=4, ensure_ascii=False)
        print(f"Dados extraídos salvos com sucesso em '{output_json_path}'.")

    except Exception as e:
        print(f"Erro ao salvar os dados no arquivo JSON '{output_json_path}': {e}")
        # Dependendo da sua necessidade, você pode querer gerar um erro aqui

    return document_data

# --- Exemplo de como usar a função ---
# Para testar esta função, você precisará ter alguns arquivos PDF.
# Você pode usar os seus slides de aula em PDF como exemplo.
# Coloque todos os arquivos PDF, por exemplo, em uma pasta chamada aulas.

# Carrega todos os caminhos para os arquivos
arquivos = []
for filename in os.listdir("./aulas"):
    if filename.endswith(".pdf"):
        print(filename)
        arquivos.append(os.path.join("./aulas", filename))

# Caminho onde o arquivo JSON será salvo
arquivo_json_saida = "aulas.json"

# Chamar a função para extrair o texto dos PDFs e salvar no JSON
# Certifique-se de que os arquivos PDF na lista_de_pdfs realmente existam
conteudo_extraido = extrai_texto_pdf_para_json(arquivos, arquivo_json_saida)
print(conteudo_extraido)


# --- Para os professores ----
arquivos = []
for filename in os.listdir("./professor"):
    if filename.endswith(".pdf"):
        print(filename)
        arquivos.append(os.path.join("./professor", filename))

# Caminho onde o arquivo JSON será salvo
arquivo_json_saida = "professores.json"

# Chamar a função para extrair o texto dos PDFs e salvar no JSON
# Certifique-se de que os arquivos PDF na lista_de_pdfs realmente existam
conteudo_extraido = extrai_texto_pdf_para_json(arquivos, arquivo_json_saida)
print(conteudo_extraido)

# Após executar, um arquivo 'conteudo_aulas_pdf.json' será criado
# no mesmo diretório do script (a menos que você especifique um caminho diferente).
# Ele conterá o texto extraído de cada PDF listado.

# Para carregar o JSON de volta e ver o conteúdo:
def carrega_aulas():
  """
  Carrega informações sobre as aulas das disciplinas de fundamentos de algoritmos.
  As informações são extraídas de um arquivo JSON.
  Retorna um dicionário com as informações carregadas.
  """
  try:
      with open("aulas.json", 'r', encoding='utf-8') as json_file:
          conteudo_carregado = json.load(json_file)
      return conteudo_carregado
  except:
    print("Alguma coisa deu errada!")

aulas = carrega_aulas()
print(aulas)

def carrega_professor():
  """
  Carrega informações sobre os professores da disciplina de fundamentos de algoritmos.
  As informações são extraídas de um arquivo JSON.
  Retorna um dicionário com as informações carregadas.
  """
  try:
      with open("professores.json", 'r', encoding='utf-8') as json_file:
          conteudo_carregado = json.load(json_file)
      return conteudo_carregado
  except:
    print("Alguma coisa deu errada!")

aulas = carrega_professor()
print(aulas)

# --- Lógica Principal ---
def main():
    print("Bem vindo ao 🤖 BOT Auxiliar sobre a Disciplina de Fundamentos de Algoritmos!")
    print()


    topico = input("❓ Faça a sua pergunta: ")

    while topico is not "":
      if not topico:
          print("Você esqueceu de digitar a pergunta!")
          return # Sai da função main se não houver pergunta

      print(f"Maravilha, vamos chamar os nossos agentes 🤖🤖🤖 para te ajudar com essa pergunta!")

      # 1. Classificar a pergunta
      classificacao = agente_classificador(topico)
      print(f"\n--- Parece que a sua dúvida é uma {classificacao} ---\n")

      # 2. Mapear a classificação para o agente correto
      agentes_disponiveis = {
          "Dúvida teórica": agente_duvida_teorica(),
          "Dúvida sobre código em Python": agente_duvida_codigo(),
          "Dúvida sobre a disciplina": agente_duvida_disciplina(),
          "Dúvida sobre a prova": agente_duvida_prova(),
          "Dúvida sobre o professor": agente_duvida_professor(),
          "Dúvida sobre o laboratório": agente_duvida_laboratorio(),
          "Dúvida sobre o Projeto": agente_duvida_projeto(),
          "Dúvida sobre o material": agente_fundamentos_algoritmos(),
          "Nenhuma das opções acima": agente_fallback() # Agente padrão para o fallback do classificador
      }

      # Seleciona o agente com base na classificação.
      # Usa .get() para retornar o agente_fallback se a classificação não estiver no dicionário.
      agente_selecionado = agentes_disponiveis.get(classificacao, agente_fallback())

      print(f"--- 🤖 Chamando o Agente Específico: {agente_selecionado.name} ---\n")

      # 3. Chamar o agente selecionado com a pergunta original
      resposta_final = chamar_agente(agente_selecionado, topico)

      print("\n--- ✅ Resposta ---\n")
      print(resposta_final)
      print("--------------------------------------------------------------")

      topico = input("❓ Faça a sua pergunta: ")
main()